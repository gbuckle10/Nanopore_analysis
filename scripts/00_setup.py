import platform
from utils.runner import load_config, get_project_root, run_external_command
import os
import sys
import requests
import tarfile
import zipfile


project_root = get_project_root()
CONFIG_PATH = os.path.join(project_root, "config.yaml")
RUNTIME_CONFIG_PATH = os.path.join(project_root, "scripts", "runtime_config.sh")

def download_file(url, destination):
    print(f"Downloading from {url} to {destination}")

    try:
        with requests.get(url, stream=True) as r:
            r.raise_for_status()
            with open(destination, 'wb') as f:
                for chunk in r.iter_content(chunk_size=8192):
                    f.write(chunk)
    except requests.exceptions.RequestException as e:
        print(f"Error downloading file: {e}", file=sys.stderr)
        sys.exit(1)

def make_directories(config):
    """
    Creates all directories specified in the config file.
    """
    print("--- Creating core directory structure ---")

    for directory in config['paths']['core_directories']:
        abs_path = os.path.join(project_root, directory)
        os.makedirs(abs_path, exist_ok=True)

    with open(RUNTIME_CONFIG_PATH, 'w') as f:
        f.write('#!/bin/bash\n')
        f.write('# Auto-generated by 00_setup.py. Do not edit manually')
    print(f"Initialised runtime config at {RUNTIME_CONFIG_PATH}")

def install_dorado(config):
    """
    Downloads and extracts the correct version of Dorado.
    """
    print(" --- Setting up Dorado ---")
    version = config['parameters']['setup']['dorado_version']
    system = platform.system()

    if system == 'Linux':
        os_type = 'linux-x64'
        archive_filename = f"dorado-{version}-{os_type}.tar.gz"
        download_url = f"https://cdn.oxfordnanoportal.com/software/analysis/dorado-{version}-{os_type}.tar.gz"
    elif system == 'Windows':
        os_type = 'win64'
        archive_filename = f"dorado-{version}-{os_type}.tar.gz"
        download_url = f"https://cdn.oxfordnanoportal.com/software/analysis/dorado-{version}-{os_type}.zip"
    else:
        print(f"You're using an operating system I don't know - {system}")
        sys.exit(1)

    dorado_dir = f"{project_root}/tools/dorado-{version}-{os_type}"

    print(f"Checking for dorado at {dorado_dir}")

    if os.path.isdir(dorado_dir):
        print(f"Dorado already found at {dorado_dir}. Skipping download.")
    else:
        print(f"Downloading dorado version {version} for {os_type} from {download_url}")
        archive_path = os.path.join(project_root, "tools", archive_filename)
        download_file(download_url, archive_path)

        print(f"Extracting {archive_path}...")
        if archive_path.endswith(".tar.gz"):
            with tarfile.open(archive_path, "r:gz") as tar:
                tar.extractall(path="tools")
        elif archive_path.endswith(".zip"):
            with zipfile.ZipFile(archive_path, 'r') as zip_ref:
                zip_ref.extractall(path="tools")
        os.remove(archive_path)
        print("Extraction complete")

    dorado_exe_path = os.path.abspath(os.path.join(dorado_dir, "bin", "dorado"))
    print(f"Adding dorado executable path {dorado_exe_path} to runtime configs")
    with open(RUNTIME_CONFIG_PATH, 'a') as f:
        f.write(f"\nexport DORADO_EXECUTABLE=\"{dorado_exe_path}\"\n")
    print(f"Dorado executable path added to {RUNTIME_CONFIG_PATH}")

def setup_submodules(config):
    print(" --- Setting up git submodules. ---")
    if not os.path.exists(f"{project_root}/.gitmodules"):
        print("No gitmodules file found. Skipping submodule setup.")
        return

    sync_command = ["git", "submodule", "sync", "--recursive"]
    update_command = ["git" "submodule" "update" "--init" "--recursive" "--force"]

    run_external_command(sync_command)
    run_external_command(update_command)

    print("Compiling wgbstools")
    wgbstools_dir = f"{project_root}/externals/wgbs_tools"
    comp_command = ["python", "setup.py"]
    run_external_command(comp_command, cwd=wgbstools_dir)

def download_atlas_files(config):
    print("--- Downloading and preparing atlas files and manifests ---")

def main():
    config = load_config(CONFIG_PATH)

    make_directories(config)
    install_dorado(config)

    '''
    
    download_and_index_reference_genome(config)
    setup_submodules(config)
    download_atlas_manifest_files(config)
d
    if config['pipeline_control']['run_setup_tasks']['download_fast5_data']:
        download_fast5_data(config)
    if config['pipeline_control']['run_setup_tasks']['convert_fast5_to_pod5']:
        convert_fast5_to_pod5(config)
  '''


if __name__ == "__main__":
    main()
